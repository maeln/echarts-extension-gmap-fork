{"version":3,"file":"echarts-extension-gmap.min.js","sources":["../src/helper.js","../src/GMapCoordSys.js","../src/GMapModel.js","../src/GMapView.js","../src/index.js","../index.js"],"sourcesContent":["import { version } from 'echarts/lib/echarts'\n\nexport const ecVer = version.split('.')\n\nexport const isNewEC = ecVer[0] > 4\n\nexport const COMPONENT_TYPE = 'gmap'\n\nexport function v2Equal(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1]\n}\n","/* global google */\n\nimport { util as zrUtil, graphic, matrix } from 'echarts/lib/echarts'\nimport { COMPONENT_TYPE } from './helper'\n\nfunction GMapCoordSys(gmap, api) {\n  this._gmap = gmap\n  this.dimensions = ['lng', 'lat']\n  this._mapOffset = [0, 0]\n  this._api = api\n}\n\nconst GMapCoordSysProto = GMapCoordSys.prototype\n\n// exclude private and unsupported options\nconst excludedOptions = [\n  'echartsLayerZIndex',\n  'renderOnMoving'\n]\n\nGMapCoordSysProto.setZoom = function(zoom) {\n  this._zoom = zoom\n}\n\nGMapCoordSysProto.setCenter = function(center) {\n  const latlng = new google.maps.LatLng(center[1], center[0])\n  this._center = latLngToPixel(latlng, this._gmap)\n}\n\nGMapCoordSysProto.setMapOffset = function(mapOffset) {\n  this._mapOffset = mapOffset\n}\n\nGMapCoordSysProto.setGoogleMap = function(gmap) {\n  this._gmap = gmap\n}\n\nGMapCoordSysProto.getGoogleMap = function() {\n  return this._gmap\n}\n\nGMapCoordSysProto.dataToPoint = function(data) {\n  const latlng = new google.maps.LatLng(data[1], data[0])\n  const px = latLngToPixel(latlng, this._gmap)\n  const mapOffset = this._mapOffset\n  return [px.x - mapOffset[0], px.y - mapOffset[1]]\n}\n\nGMapCoordSysProto.pointToData = function(pt) {\n  const mapOffset = this._mapOffset\n  const latlng = pixelToLatLng(\n    new google.maps.Point(pt[0] + mapOffset[0], pt[1] + mapOffset[1]),\n    this._gmap\n  )\n  return [latlng.lng(), latlng.lat()]\n}\n\nGMapCoordSysProto.getViewRect = function() {\n  const api = this._api\n  return new graphic.BoundingRect(0, 0, api.getWidth(), api.getHeight())\n}\n\nGMapCoordSysProto.getRoamTransform = function() {\n  return matrix.create()\n}\n\nGMapCoordSysProto.prepareCustoms = function() {\n  const rect = this.getViewRect()\n  return {\n    coordSys: {\n      type: COMPONENT_TYPE,\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height\n    },\n    api: {\n      coord: zrUtil.bind(this.dataToPoint, this),\n      size: zrUtil.bind(dataToCoordSize, this)\n    }\n  }\n}\n\nfunction dataToCoordSize(dataSize, dataItem) {\n  dataItem = dataItem || [0, 0]\n  return zrUtil.map(\n    [0, 1],\n    function(dimIdx) {\n      const val = dataItem[dimIdx]\n      const halfSize = dataSize[dimIdx] / 2\n      const p1 = []\n      const p2 = []\n      p1[dimIdx] = val - halfSize\n      p2[dimIdx] = val + halfSize\n      p1[1 - dimIdx] = p2[1 - dimIdx] = dataItem[1 - dimIdx]\n      return Math.abs(\n        this.dataToPoint(p1)[dimIdx] - this.dataToPoint(p2)[dimIdx]\n      )\n    },\n    this\n  )\n}\n\n// For deciding which dimensions to use when creating list data\nGMapCoordSys.dimensions = GMapCoordSysProto.dimensions\n\nGMapCoordSys.create = function(ecModel, api) {\n  let gmapCoordSys\n  const root = api.getDom()\n\n  ecModel.eachComponent(COMPONENT_TYPE, function(gmapModel) {\n    const painter = api.getZr().painter\n    const viewportRoot = painter.getViewportRoot()\n    if (typeof google === 'undefined' || !google.maps || !google.maps.Map) {\n      throw new Error('Google Map API is not loaded')\n    }\n    Overlay = Overlay || createOverlayCtor()\n    if (gmapCoordSys) {\n      throw new Error('Only one google map component is allowed')\n    }\n    let gmap = gmapModel.getGoogleMap()\n    if (!gmap) {\n      // Not support IE8\n      const className = 'ec-extension-google-map'\n      let gmapRoot = root.querySelector('.' + className)\n      if (gmapRoot) {\n        // Reset viewport left and top, which will be changed\n        // in moving handler in GMapView\n        viewportRoot.style.left = '0'\n        viewportRoot.style.top = '0'\n        root.removeChild(gmapRoot)\n      }\n      gmapRoot = document.createElement('div')\n      gmapRoot.className = className\n      gmapRoot.style.cssText = 'position:absolute;top:0;left:0;right:0;bottom:0'\n      root.appendChild(gmapRoot)\n\n      const options = zrUtil.clone(gmapModel.get())\n      const echartsLayerZIndex = options.echartsLayerZIndex\n      // delete excluded options\n      zrUtil.each(excludedOptions, function(key) {\n        delete options[key]\n      })\n      const center = options.center\n      // normalize center\n      if (zrUtil.isArray(center)) {\n        options.center = {\n          lng: center[0],\n          lat: center[1]\n        }\n      }\n\n      gmap = new google.maps.Map(gmapRoot, options)\n      gmapModel.setGoogleMap(gmap)\n\n      gmapModel.__projectionChangeListener && gmapModel.__projectionChangeListener.remove()\n      gmapModel.__projectionChangeListener = google.maps.event.addListener(gmap, 'projection_changed',\n        function() {\n          const layer = gmapModel.getEChartsLayer()\n          layer && layer.setMap(null)\n\n          const overlay = new Overlay(viewportRoot, gmap)\n          overlay.setZIndex(echartsLayerZIndex)\n          gmapModel.setEChartsLayer(overlay)\n        }\n      )\n\n      // Override\n      painter.getViewportRootOffset = function() {\n        return { offsetLeft: 0, offsetTop: 0 }\n      }\n    }\n\n    const center = gmapModel.get('center')\n    const normalizedCenter = [\n      center.lng != null ? center.lng : center[0],\n      center.lat != null ? center.lat : center[1]\n    ]\n    const zoom = gmapModel.get('zoom')\n    if (center && zoom) {\n      const gmapCenter = gmap.getCenter()\n      const gmapZoom = gmap.getZoom()\n      const centerOrZoomChanged = gmapModel.centerOrZoomChanged([gmapCenter.lng(), gmapCenter.lat()], gmapZoom)\n      if (centerOrZoomChanged) {\n        const pt = new google.maps.LatLng(normalizedCenter[1], normalizedCenter[0])\n        gmap.setOptions({\n          center: pt,\n          zoom: zoom\n        })\n      }\n    }\n\n    gmapCoordSys = new GMapCoordSys(gmap, api)\n    gmapCoordSys.setMapOffset(gmapModel.__mapOffset || [0, 0])\n    gmapCoordSys.setZoom(zoom)\n    gmapCoordSys.setCenter(normalizedCenter)\n\n    gmapModel.coordinateSystem = gmapCoordSys\n  })\n\n  ecModel.eachSeries(function(seriesModel) {\n    if (seriesModel.get('coordinateSystem') === COMPONENT_TYPE) {\n      seriesModel.coordinateSystem = gmapCoordSys\n    }\n  })\n}\n\nlet Overlay\n\nfunction createOverlayCtor() {\n    function Overlay(root, gmap) {\n      this._root = root\n      this.setMap(gmap)\n    }\n\n    Overlay.prototype = new google.maps.OverlayView()\n\n    Overlay.prototype.onAdd = function() {\n      const gmap = this.getMap()\n      gmap.__overlayProjection = this.getProjection()\n      gmap.getDiv().querySelector('.gm-style > div').appendChild(this._root)\n    }\n\n    /**\n     * @override\n     */\n    Overlay.prototype.draw = function() {\n      google.maps.event.trigger(this.getMap(), 'gmaprender')\n    }\n\n    Overlay.prototype.onRemove = function() {\n      this._root.parentNode.removeChild(this._root)\n      this._root = null\n    }\n\n    Overlay.prototype.setZIndex = function(zIndex) {\n      this._root.style.zIndex = zIndex\n    }\n\n    Overlay.prototype.getZIndex = function() {\n      return this._root.style.zIndex\n    }\n\n    return Overlay\n}\n\nfunction latLngToPixel(latLng, map) {\n  const projection = map.__overlayProjection\n  if (!projection) {\n    return new google.maps.Point(-Infinity, -Infinity)\n  }\n\n  return projection.fromLatLngToContainerPixel(latLng)\n}\n\nfunction pixelToLatLng(pixel, map) {\n  const projection = map.__overlayProjection\n  if (!projection) {\n    return new google.maps.Point(-Infinity, -Infinity)\n  }\n\n  return projection.fromContainerPixelToLatLng(pixel)\n}\n\nGMapCoordSysProto.dimensions = GMapCoordSys.dimensions = ['lng', 'lat']\n\nGMapCoordSysProto.type = COMPONENT_TYPE\n\nexport default GMapCoordSys\n","import { ComponentModel } from 'echarts/lib/echarts'\nimport { COMPONENT_TYPE, isNewEC, v2Equal } from './helper'\n\nconst GMapModel = {\n  type: COMPONENT_TYPE,\n\n  setGoogleMap(gmap) {\n    this.__gmap = gmap\n  },\n\n  getGoogleMap() {\n    // __gmap is set when creating GMapCoordSys\n    return this.__gmap\n  },\n\n  setEChartsLayer(layer) {\n    this.__echartsLayer = layer\n  },\n\n  getEChartsLayer() {\n    return this.__echartsLayer\n  },\n\n  setCenterAndZoom(center, zoom) {\n    this.option.center = center\n    this.option.zoom = zoom\n  },\n\n  centerOrZoomChanged(center, zoom) {\n    const option = this.option\n    return !(v2Equal(center, option.center) && zoom === option.zoom)\n  },\n\n  defaultOption: {\n    center: { lat: 39.90923, lng: 116.397428 },\n    zoom: 5,\n\n    // extension options\n    // since v1.4.0\n    roam: true,\n    echartsLayerZIndex: 2000,\n    renderOnMoving: true\n  }\n}\n\nexport default isNewEC\n  ? ComponentModel.extend(GMapModel)\n  : GMapModel\n","/* global google */\n\nimport { ComponentView, getInstanceByDom, throttle } from 'echarts/lib/echarts'\nimport { isNewEC, COMPONENT_TYPE } from './helper'\n\nconst GMapView = {\n  type: COMPONENT_TYPE,\n\n  render(gmapModel, ecModel, api) {\n    let rendering = true\n\n    const gmap = gmapModel.getGoogleMap()\n    const viewportRoot = api.getZr().painter.getViewportRoot()\n    const coordSys = gmapModel.coordinateSystem\n    const offsetEl = gmap.getDiv()\n    const renderOnMoving = gmapModel.get('renderOnMoving')\n    const oldWidth = offsetEl.clientWidth\n    const oldHeight = offsetEl.clientHeight\n\n    gmap.setOptions({\n      gestureHandling: gmapModel.get('roam') ? 'auto' : 'none'\n    })\n\n    let renderHandler = function() {\n      if (rendering) {\n        return\n      }\n\n      // need resize?\n      const width = offsetEl.clientWidth\n      const height = offsetEl.clientHeight\n      if (width !== oldWidth || height !== oldHeight) {\n        return resizeHandler.call(this)\n      }\n\n      const mapOffset = [\n        -parseInt(offsetEl.style.left, 10) || 0,\n        -parseInt(offsetEl.style.top, 10) || 0\n      ]\n      viewportRoot.style.left = mapOffset[0] + 'px'\n      viewportRoot.style.top = mapOffset[1] + 'px'\n\n      coordSys.setMapOffset(mapOffset)\n      gmapModel.__mapOffset = mapOffset\n\n      api.dispatchAction({\n        type: COMPONENT_TYPE + 'Roam',\n        animation: {\n          // in ECharts 5.x,\n          // we can set animation duration as 0\n          // to ensure no delay when moving or zooming\n          duration: 0\n        }\n      })\n    }\n\n    let resizeHandler = function() {\n      getInstanceByDom(api.getDom()).resize()\n    }\n\n    this._oldRenderHandler && this._oldRenderHandler.remove()\n\n    if (!renderOnMoving) {\n      // TODO hide layer when moving\n      renderHandler = throttle(renderHandler, 100, true)\n      resizeHandler = throttle(resizeHandler, 100, true)\n    }\n\n    this._oldRenderHandler = google.maps.event.addListener(gmap, 'gmaprender', renderHandler)\n\n    rendering = false\n  },\n\n  dispose() {\n    this._oldRenderHandler && this._oldRenderHandler.remove()\n    this._oldRenderHandler = null\n\n    const component = this.__model\n    if (!component) {\n      return\n    }\n\n    const gmapInstance = component.getGoogleMap()\n\n    if (gmapInstance) {\n      // remove injected projection\n      delete gmapInstance.__overlayProjection\n\n      // clear all listeners of map instance\n      google.maps.event.clearInstanceListeners(gmapInstance)\n\n      // remove DOM of map instance\n      const mapDiv = gmapInstance.getDiv()\n      mapDiv.parentNode && mapDiv.parentNode.removeChild(mapDiv)\n    }\n\n    component.setGoogleMap(null)\n    component.setEChartsLayer(null)\n\n    if (component.coordinateSystem) {\n      component.coordinateSystem.setGoogleMap(null)\n      component.coordinateSystem = null\n    }\n  }\n}\n\nexport default isNewEC\n  ? ComponentView.extend(GMapView)\n  : GMapView\n","/**\n * Google Map component extension\n */\n\n import GMapCoordSys from './GMapCoordSys'\n import GMapModel from './GMapModel'\n import GMapView from './GMapView'\n import { isNewEC, ecVer, COMPONENT_TYPE } from './helper'\n\nexport { version, name } from '../package.json';\n\n/**\n * @typedef {import('../export').EChartsExtensionRegisters} EChartsExtensionRegisters\n */\n\n/**\n * Google Map extension installer\n * @param {EChartsExtensionRegisters} registers\n */\n export function install(registers) {\n  // add coordinate system support for pie series for ECharts < 5.4.0\n  if (!isNewEC || (ecVer[0] == 5 && ecVer[1] < 4)) {\n    registers.registerLayout(function(ecModel) {\n      ecModel.eachSeriesByType('pie', function (seriesModel) {\n        const coordSys = seriesModel.coordinateSystem\n        const data = seriesModel.getData()\n        const valueDim = data.mapDimension('value')\n        if (coordSys && coordSys.type === COMPONENT_TYPE) {\n          const center = seriesModel.get('center')\n          const point = coordSys.dataToPoint(center)\n          const cx = point[0]\n          const cy = point[1]\n          data.each(valueDim, function (value, idx) {\n            const layout = data.getItemLayout(idx)\n            layout.cx = cx\n            layout.cy = cy\n          })\n        }\n      })\n    })\n  }\n  // Model\n  isNewEC\n    ? registers.registerComponentModel(GMapModel)\n    : registers.extendComponentModel(GMapModel)\n  // View\n  isNewEC\n    ? registers.registerComponentView(GMapView)\n    : registers.extendComponentView(GMapView)\n  // Coordinate System\n  registers.registerCoordinateSystem(COMPONENT_TYPE, GMapCoordSys)\n  // Action\n  registers.registerAction(\n    {\n      type: COMPONENT_TYPE + 'Roam',\n      event: COMPONENT_TYPE + 'Roam',\n      update: 'updateLayout'\n    },\n    function(payload, ecModel) {\n      ecModel.eachComponent(COMPONENT_TYPE, function(gmapModel) {\n        const gmap = gmapModel.getGoogleMap()\n        const center = gmap.getCenter()\n        gmapModel.setCenterAndZoom([center.lng(), center.lat()], gmap.getZoom())\n      })\n    }\n  )\n}\n","import * as echarts from 'echarts/lib/echarts'\nimport { install } from './src/index'\nimport { isNewEC } from './src/helper'\n\nisNewEC ? echarts.use(install) : install(echarts)\n\nexport { name, version } from './src/index'\n"],"names":["ecVer","version","split","isNewEC","COMPONENT_TYPE","GMapCoordSys","gmap","api","this","_gmap","dimensions","_mapOffset","_api","Overlay","GMapCoordSysProto","prototype","excludedOptions","dataToCoordSize","dataSize","dataItem","zrUtil","map","dimIdx","val","halfSize","p1","p2","Math","abs","dataToPoint","latLngToPixel","latLng","projection","__overlayProjection","fromLatLngToContainerPixel","google","maps","Point","Infinity","setZoom","zoom","_zoom","setCenter","center","latlng","LatLng","_center","setMapOffset","mapOffset","setGoogleMap","getGoogleMap","data","px","x","y","pointToData","pt","pixel","fromContainerPixelToLatLng","pixelToLatLng","lng","lat","getViewRect","graphic","BoundingRect","getWidth","getHeight","getRoamTransform","matrix","create","prepareCustoms","rect","coordSys","type","width","height","coord","bind","size","util","ecModel","gmapCoordSys","root","getDom","eachComponent","gmapModel","painter","getZr","viewportRoot","getViewportRoot","Map","Error","_root","setMap","OverlayView","onAdd","getMap","getProjection","getDiv","querySelector","appendChild","draw","event","trigger","onRemove","parentNode","removeChild","setZIndex","zIndex","style","getZIndex","createOverlayCtor","className","gmapRoot","left","top","document","createElement","cssText","options","clone","get","echartsLayerZIndex","each","key","isArray","__projectionChangeListener","remove","addListener","layer","getEChartsLayer","overlay","setEChartsLayer","getViewportRootOffset","offsetLeft","offsetTop","normalizedCenter","gmapCenter","getCenter","gmapZoom","getZoom","centerOrZoomChanged","setOptions","__mapOffset","coordinateSystem","eachSeries","seriesModel","GMapModel","__gmap","__echartsLayer","setCenterAndZoom","option","a","b","defaultOption","roam","renderOnMoving","ComponentModel","extend","GMapView","render","rendering","offsetEl","oldWidth","clientWidth","oldHeight","clientHeight","gestureHandling","renderHandler","resizeHandler","call","parseInt","dispatchAction","animation","duration","getInstanceByDom","resize","_oldRenderHandler","throttle","dispose","component","__model","gmapInstance","clearInstanceListeners","mapDiv","ComponentView","install","registers","registerLayout","eachSeriesByType","getData","valueDim","mapDimension","point","cx","cy","value","idx","layout","getItemLayout","registerComponentModel","extendComponentModel","registerComponentView","extendComponentView","registerCoordinateSystem","registerAction","update","payload","echarts","use"],"mappings":"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"}